/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: PixartistLilack (https://sketchfab.com/PixartistLilack)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/n-anniversary-40-098effb437a2471d8ef55eb9f83ecbb1
Title: N_Anniversary_40
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

import WomanScene from "../assets/3d/woman.glb";
import { a } from "@react-spring/three";
import { useFrame, useThree } from "@react-three/fiber";

const Woman = ({ isRotating, setIsRotating, setCurrentStage,currentAnimation, ...props }) => {
  const groupRef = useRef();

  const { gl, viewport } = useThree();

  const { nodes, materials, animations } = useGLTF(WomanScene);
  const { actions } = useAnimations(animations, groupRef);

  useEffect(() => {
    Object.values(actions).forEach((action) => action.stop());

    if(actions[currentAnimation]) {
        actions[currentAnimation].play();
    }
},[actions,currentAnimation])

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };
  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      groupRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      groupRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      groupRef.current.rotation.y -= 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;

      } 
      groupRef.current.rotation.y += rotationSpeed.current;
      }else {
        const rotation = groupRef.current.rotation.y;

        /**
         * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
         * The goal is to ensure that the rotation value remains within a specific range to
         * prevent potential issues with very large or negative rotation values.
         *  Here's a step-by-step explanation of what this code does:
         *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
         *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
         *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
         *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
         *     This is done to ensure that the value remains positive and within the range of
         *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
         *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
         *     modulo operation to the value obtained in step 2. This step guarantees that the value
         *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
         *     circle in radians.
         */
        const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

        // Set the current stage based on the island's orientation
        switch (true) {
          case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            setCurrentStage(4);
            break;
          case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            setCurrentStage(3);
            break;
          case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            setCurrentStage(2);
            break;
          case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            setCurrentStage(1);
            break;
          default:
            setCurrentStage(null);
        }
      }
    }
  );

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keyDown", handleKeyDown);
    document.addEventListener("keyUp", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keyDown", handleKeyDown);
      document.removeEventListener("keyUp", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);
  return (
    <a.group ref={groupRef} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="N_Anniversary_40fbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group name="Armature447" scale={100}>
                  <group name="Object_5">
                    <primitive object={nodes._rootJoint} />
                    <skinnedMesh
                      name="Object_174"
                      geometry={nodes.Object_174.geometry}
                      material={materials["M_ch0089_40_n_body.001"]}
                      skeleton={nodes.Object_174.skeleton}
                    />
                    <skinnedMesh
                      name="Object_175"
                      geometry={nodes.Object_175.geometry}
                      material={materials["M_ch0089_40_n_mouth.001"]}
                      skeleton={nodes.Object_175.skeleton}
                    />
                    <skinnedMesh
                      name="Object_176"
                      geometry={nodes.Object_176.geometry}
                      material={materials["M_ch0089_40_n_hair.001"]}
                      skeleton={nodes.Object_176.skeleton}
                    />
                    <skinnedMesh
                      name="Object_177"
                      geometry={nodes.Object_177.geometry}
                      material={materials["M_ch0089_40_n_skin.001"]}
                      skeleton={nodes.Object_177.skeleton}
                    />
                    <skinnedMesh
                      name="Object_178"
                      geometry={nodes.Object_178.geometry}
                      material={materials["M_ch0089_40_n_face.001"]}
                      skeleton={nodes.Object_178.skeleton}
                    />
                    <group name="Object_173" scale={100} />
                  </group>
                </group>
                <group name="N_Anniversary_EX" scale={100} />
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
  );
};

export default Woman;
